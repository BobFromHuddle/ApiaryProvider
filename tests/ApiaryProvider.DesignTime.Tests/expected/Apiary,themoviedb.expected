class ApiaryProvider : ApiaryProvider.Runtime.ApiaryContext
    new : rootUrl:string -> ApiaryProvider
    (new ApiaryContext(rootUrl))

    member Account: ApiaryProvider+Account with get
    (this :> InternalApiaryContext)

    member AsyncConfiguration: query:string * string list -> headers:string * string list -> ApiaryProvider+Configuration async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/configuration"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Authentication: ApiaryProvider+Authentication with get
    (this :> InternalApiaryContext)

    member Certification: ApiaryProvider+Certification with get
    (this :> InternalApiaryContext)

    member Collection: ApiaryProvider+Collection with get
    (this :> InternalApiaryContext)

    member Company: ApiaryProvider+Company with get
    (this :> InternalApiaryContext)

    member Configuration: query:string * string list -> headers:string * string list -> ApiaryProvider+Configuration
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = (this :> InternalApiaryContext)
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/configuration"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Credit: ApiaryProvider+Credit with get
    (this :> InternalApiaryContext)

    member Discover: ApiaryProvider+Discover with get
    (this :> InternalApiaryContext)

    member Find: ApiaryProvider+Find with get
    (this :> InternalApiaryContext)

    member Genre: ApiaryProvider+Genre2 with get
    (this :> InternalApiaryContext)

    member GuestSession: ApiaryProvider+GuestSession2 with get
    (this :> InternalApiaryContext)

    member Job: ApiaryProvider+Job with get
    (this :> InternalApiaryContext)

    member Keyword: ApiaryProvider+Keyword with get
    (this :> InternalApiaryContext)

    member List: ApiaryProvider+List with get
    (this :> InternalApiaryContext)

    member Movie: ApiaryProvider+Movie2 with get
    (this :> InternalApiaryContext)

    member Network: ApiaryProvider+Network with get
    (this :> InternalApiaryContext)

    member Person: ApiaryProvider+Person with get
    (this :> InternalApiaryContext)

    member Review: ApiaryProvider+Review with get
    (this :> InternalApiaryContext)

    member Search: ApiaryProvider+Search with get
    (this :> InternalApiaryContext)

    member Timezones: ApiaryProvider+Timezones with get
    (this :> InternalApiaryContext)

    member Tv: ApiaryProvider+Tv with get
    (this :> InternalApiaryContext)


class ApiaryProvider+Account : ApiaryProvider.Runtime.InternalApiaryContext
    member AsyncList: query:string * string list -> headers:string * string list -> ApiaryProvider+AccountList async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/account"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member List: query:string * string list -> headers:string * string list -> ApiaryProvider+AccountList
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/account"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Authentication : ApiaryProvider.Runtime.InternalApiaryContext
    member GuestSession: ApiaryProvider+GuestSession with get
    this

    member Session: ApiaryProvider+Session with get
    this

    member Token: ApiaryProvider+Token with get
    this


class ApiaryProvider+Certification : ApiaryProvider.Runtime.InternalApiaryContext
    member Movie: ApiaryProvider+Movie with get
    this


class ApiaryProvider+Collection : ApiaryProvider.Runtime.InternalApiaryContext
    member AsyncGetCollection: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Collection2 async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/collection/{id}"
                               Arguments = [| ("{id}",
                                               id) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member GetCollection: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Collection2
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/collection/{id}"
          Arguments = [| ("{id}",
                          id) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Company : ApiaryProvider.Runtime.InternalApiaryContext
    member AsyncGetCompany: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Company2 async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/company/{id}"
                               Arguments = [| ("{id}",
                                               id) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member GetCompany: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Company2
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/company/{id}"
          Arguments = [| ("{id}",
                          id) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Configuration : FDR.IJsonDocument
    member ChangeKeys: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "change_keys"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Images: ApiaryProvider+Images with get
    JsonRuntime.GetPropertyPacked(this, "images")


class ApiaryProvider+Credit : ApiaryProvider.Runtime.InternalApiaryContext
    member AsyncCreditId: query:string * string list -> headers:string * string list -> ApiaryProvider+CreditCreditId async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/credit/{credit_id}"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member CreditId: query:string * string list -> headers:string * string list -> ApiaryProvider+CreditCreditId
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/credit/{credit_id}"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Discover : ApiaryProvider.Runtime.InternalApiaryContext
    member AsyncMovie: query:string * string list -> headers:string * string list -> ApiaryProvider+DiscoverMovie async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/discover/movie"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncTv: query:string * string list -> headers:string * string list -> ApiaryProvider+DiscoverTv async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/discover/tv"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Movie: query:string * string list -> headers:string * string list -> ApiaryProvider+DiscoverMovie
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/discover/movie"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Tv: query:string * string list -> headers:string * string list -> ApiaryProvider+DiscoverTv
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/discover/tv"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Find : ApiaryProvider.Runtime.InternalApiaryContext
    member AsyncId: query:string * string list -> headers:string * string list -> ApiaryProvider+FindId async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/find/{id}"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Id: query:string * string list -> headers:string * string list -> ApiaryProvider+FindId
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/find/{id}"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Genre2 : ApiaryProvider.Runtime.InternalApiaryContext
    member AsyncList: query:string * string list -> headers:string * string list -> ApiaryProvider+GenreList async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/genre/list"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Id: ApiaryProvider+Id with get
    this

    member List: query:string * string list -> headers:string * string list -> ApiaryProvider+GenreList
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/genre/list"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+GuestSession2 : ApiaryProvider.Runtime.InternalApiaryContext
    member GuestSessionId: ApiaryProvider+GuestSessionId with get
    this


class ApiaryProvider+Job : ApiaryProvider.Runtime.InternalApiaryContext
    member AsyncList: query:string * string list -> headers:string * string list -> ApiaryProvider+JobList async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/job/list"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member List: query:string * string list -> headers:string * string list -> ApiaryProvider+JobList
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/job/list"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Keyword : ApiaryProvider.Runtime.InternalApiaryContext
    member AsyncGetKeyword: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Genre async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/keyword/{id}"
                               Arguments = [| ("{id}",
                                               id) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member GetKeyword: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Genre
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/keyword/{id}"
          Arguments = [| ("{id}",
                          id) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+List : ApiaryProvider.Runtime.InternalApiaryContext
    member AsyncGetList: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+List2 async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/list/{id}"
                               Arguments = [| ("{id}",
                                               id) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member GetList: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+List2
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/list/{id}"
          Arguments = [| ("{id}",
                          id) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Movie2 : ApiaryProvider.Runtime.InternalApiaryContext
    member AsyncChanges: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieChanges async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/movie/changes"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncGetMovie: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Movie3 async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/movie/{id}"
                               Arguments = [| ("{id}",
                                               id) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncLatest: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieLatest async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/movie/latest"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncNowPlaying: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieUpcoming async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/movie/now_playing"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncPopular: query:string * string list -> headers:string * string list -> ApiaryProvider+MoviePopular async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/movie/popular"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncTopRated: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieTopRated async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/movie/top_rated"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncUpcoming: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieUpcoming async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/movie/upcoming"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Changes: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieChanges
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/changes"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member GetMovie: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Movie3
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}"
          Arguments = [| ("{id}",
                          id) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Latest: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieLatest
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/latest"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member NowPlaying: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieUpcoming
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/now_playing"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Popular: query:string * string list -> headers:string * string list -> ApiaryProvider+MoviePopular
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/popular"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member TopRated: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieTopRated
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/top_rated"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Upcoming: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieUpcoming
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/upcoming"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Network : ApiaryProvider.Runtime.InternalApiaryContext
    member AsyncId: query:string * string list -> headers:string * string list -> ApiaryProvider+Genre async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/network/{id}"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Id: query:string * string list -> headers:string * string list -> ApiaryProvider+Genre
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/network/{id}"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Person : ApiaryProvider.Runtime.InternalApiaryContext
    member AsyncChanges: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieChanges async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/person/changes"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncGetPerson: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Person2 async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/person/{id}"
                               Arguments = [| ("{id}",
                                               id) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncLatest: query:string * string list -> headers:string * string list -> ApiaryProvider+PersonLatest async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/person/latest"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncPopular: query:string * string list -> headers:string * string list -> ApiaryProvider+PersonPopular async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/person/popular"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Changes: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieChanges
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/person/changes"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member GetPerson: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Person2
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/person/{id}"
          Arguments = [| ("{id}",
                          id) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Latest: query:string * string list -> headers:string * string list -> ApiaryProvider+PersonLatest
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/person/latest"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Popular: query:string * string list -> headers:string * string list -> ApiaryProvider+PersonPopular
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/person/popular"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Review : ApiaryProvider.Runtime.InternalApiaryContext
    member AsyncId: query:string * string list -> headers:string * string list -> ApiaryProvider+ReviewId async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/review/{id}"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Id: query:string * string list -> headers:string * string list -> ApiaryProvider+ReviewId
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/review/{id}"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Search : ApiaryProvider.Runtime.InternalApiaryContext
    member AsyncCollection: query:string * string list -> headers:string * string list -> ApiaryProvider+SearchCollection async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/search/collection"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncCompany: query:string * string list -> headers:string * string list -> ApiaryProvider+SearchCompany async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/search/company"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncKeyword: query:string * string list -> headers:string * string list -> ApiaryProvider+SearchKeyword async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/search/keyword"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncList: query:string * string list -> headers:string * string list -> ApiaryProvider+SearchList async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/search/list"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncMovie: query:string * string list -> headers:string * string list -> ApiaryProvider+SearchMovie async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/search/movie"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncPerson: query:string * string list -> headers:string * string list -> ApiaryProvider+SearchPerson async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/search/person"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncTv: query:string * string list -> headers:string * string list -> ApiaryProvider+SearchTv async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/search/tv"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Collection: query:string * string list -> headers:string * string list -> ApiaryProvider+SearchCollection
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/search/collection"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Company: query:string * string list -> headers:string * string list -> ApiaryProvider+SearchCompany
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/search/company"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Keyword: query:string * string list -> headers:string * string list -> ApiaryProvider+SearchKeyword
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/search/keyword"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member List: query:string * string list -> headers:string * string list -> ApiaryProvider+SearchList
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/search/list"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Movie: query:string * string list -> headers:string * string list -> ApiaryProvider+SearchMovie
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/search/movie"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Person: query:string * string list -> headers:string * string list -> ApiaryProvider+SearchPerson
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/search/person"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Tv: query:string * string list -> headers:string * string list -> ApiaryProvider+SearchTv
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/search/tv"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Timezones : ApiaryProvider.Runtime.InternalApiaryContext
    member AsyncList: query:string * string list -> headers:string * string list -> ApiaryProvider+TimezonesList[] async
    let f = new Func<_,_>(fun (t:ApiaryDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(id))))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/timezones/list"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member List: query:string * string list -> headers:string * string list -> ApiaryProvider+TimezonesList[]
    JsonRuntime.ConvertArray(let patternInput = 
                                 let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                 let headers, query = patternInput
                                 let apiCtx = this
                                 (apiCtx :> ApiaryOperations),
                                 { Method = "GET"
                                   Path = "/3/timezones/list"
                                   Arguments = [| |]
                                   Headers = headers
                                   Query = query }
                             let apiCtx, args = patternInput
                             apiCtx.InvokeOperation(args), new Func<_,_>(id)))


class ApiaryProvider+Tv : ApiaryProvider.Runtime.InternalApiaryContext
    member AiringToday: query:string * string list -> headers:string * string list -> ApiaryProvider+TvOnTheAir
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/tv/airing_today"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member AsyncAiringToday: query:string * string list -> headers:string * string list -> ApiaryProvider+TvOnTheAir async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/tv/airing_today"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncGetTv: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Tv2 async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/tv/{id}"
                               Arguments = [| ("{id}",
                                               id) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncOnTheAir: query:string * string list -> headers:string * string list -> ApiaryProvider+TvOnTheAir async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/tv/on_the_air"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncPopular: query:string * string list -> headers:string * string list -> ApiaryProvider+DiscoverTv async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/tv/popular"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncTopRated: query:string * string list -> headers:string * string list -> ApiaryProvider+TvTopRated async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/tv/top_rated"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member GetTv: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Tv2
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/tv/{id}"
          Arguments = [| ("{id}",
                          id) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member OnTheAir: query:string * string list -> headers:string * string list -> ApiaryProvider+TvOnTheAir
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/tv/on_the_air"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Popular: query:string * string list -> headers:string * string list -> ApiaryProvider+DiscoverTv
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/tv/popular"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member TopRated: query:string * string list -> headers:string * string list -> ApiaryProvider+TvTopRated
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/tv/top_rated"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+AccountList : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member IncludeAdult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "include_adult")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member Iso31661: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "iso_3166_1")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Iso6391: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "iso_639_1")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Username: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "username")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Collection2 : FDR.IJsonDocument
    member AsyncImages: query:string * string list -> headers:string * string list -> ApiaryProvider+CollectionImages async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/collection/{id}/images"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member BackdropPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "backdrop_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Images: query:string * string list -> headers:string * string list -> ApiaryProvider+CollectionImages
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/collection/{id}/images"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Parts: ApiaryProvider+Part[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "parts"), new Func<_,_>(id)))

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "poster_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Company2 : FDR.IJsonDocument
    member AsyncMovies: query:string * string list -> headers:string * string list -> ApiaryProvider+CompanyMovies async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/company/{id}/movies"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Description: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "description")

    member Headquarters: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "headquarters")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Homepage: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "homepage")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member LogoPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "logo_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Movies: query:string * string list -> headers:string * string list -> ApiaryProvider+CompanyMovies
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/company/{id}/movies"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ParentCompany: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "parent_company")


class ApiaryProvider+CreditCreditId : FDR.IJsonDocument
    member CreditType: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "credit_type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Department: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "department")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Job: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "job")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Media: ApiaryProvider+Media with get
    JsonRuntime.GetPropertyPacked(this, "media")

    member MediaType: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "media_type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Person: ApiaryProvider+ProductionCompany with get
    JsonRuntime.GetPropertyPacked(this, "person")


class ApiaryProvider+DiscoverMovie : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Results: ApiaryProvider+Result10[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_results")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+DiscoverTv : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Results: ApiaryProvider+Result11[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_results")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+FindId : FDR.IJsonDocument
    member MovieResults: ApiaryProvider+MovieResult[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "movie_results"), new Func<_,_>(id)))

    member PersonResults: FDR.IJsonDocument[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "person_results"), new Func<_,_>(id)))

    member TvResults: FDR.IJsonDocument[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "tv_results"), new Func<_,_>(id)))


class ApiaryProvider+Genre : FDR.IJsonDocument
    member AsyncMovies: query:string * string list -> headers:string * string list -> ApiaryProvider+GenreIdMovies async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/keyword/{id}/movies"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Movies: query:string * string list -> headers:string * string list -> ApiaryProvider+GenreIdMovies
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/keyword/{id}/movies"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+GenreList : FDR.IJsonDocument
    member Genres: ApiaryProvider+Genre[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "genres"), new Func<_,_>(id)))


class ApiaryProvider+GuestSession : ApiaryProvider.Runtime.InternalApiaryContext
    member AsyncNew: query:string * string list -> headers:string * string list -> ApiaryProvider+AuthenticationGuestSessionNew async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/authentication/guest_session/new"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member New: query:string * string list -> headers:string * string list -> ApiaryProvider+AuthenticationGuestSessionNew
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/authentication/guest_session/new"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+GuestSessionId : ApiaryProvider.Runtime.InternalApiaryContext
    member AsyncRatedMovies: query:string * string list -> headers:string * string list -> ApiaryProvider+GuestSessionGuestSessionIdRatedMovies async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/guest_session/{guest_session_id}/rated_movies"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member RatedMovies: query:string * string list -> headers:string * string list -> ApiaryProvider+GuestSessionGuestSessionIdRatedMovies
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/guest_session/{guest_session_id}/rated_movies"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Id : ApiaryProvider.Runtime.InternalApiaryContext
    member AsyncMovies: query:string * string list -> headers:string * string list -> ApiaryProvider+GenreIdMovies async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/genre/{id}/movies"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Movies: query:string * string list -> headers:string * string list -> ApiaryProvider+GenreIdMovies
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/genre/{id}/movies"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Images : FDR.IJsonDocument
    member BackdropSizes: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "backdrop_sizes"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member BaseUrl: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "base_url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member LogoSizes: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "logo_sizes"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member PosterSizes: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "poster_sizes"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member ProfileSizes: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "profile_sizes"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member SecureBaseUrl: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "secure_base_url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member StillSizes: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "still_sizes"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))


class ApiaryProvider+JobList : FDR.IJsonDocument
    member Jobs: ApiaryProvider+Job2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "jobs"), new Func<_,_>(id)))


class ApiaryProvider+List2 : FDR.IJsonDocument
    member AddItem: query:string * string list -> headers:string * string list -> FDR.IJsonDocument
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json
Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "POST"
          Path = "/3/list/{id}/add_item"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member AsyncAddItem: query:string * string list -> headers:string * string list -> FDR.IJsonDocument async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json
Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/3/list/{id}/add_item"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncClear: query:string * string list -> headers:string * string list -> FDR.IJsonDocument async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/3/list/{id}/clear"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncItemStatus: query:string * string list -> headers:string * string list -> ApiaryProvider+ListItemStatus async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/list/{id}/item_status"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncRemoveItem: query:string * string list -> headers:string * string list -> FDR.IJsonDocument async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json
Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/3/list/{id}/remove_item"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Clear: query:string * string list -> headers:string * string list -> FDR.IJsonDocument
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "POST"
          Path = "/3/list/{id}/clear"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member CreatedBy: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_by")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Description: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "description")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member FavoriteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "favorite_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Iso6391: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "iso_639_1")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ItemCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "item_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member ItemStatus: query:string * string list -> headers:string * string list -> ApiaryProvider+ListItemStatus
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/list/{id}/item_status"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Items: ApiaryProvider+Item3[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "items"), new Func<_,_>(id)))

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "poster_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member RemoveItem: query:string * string list -> headers:string * string list -> FDR.IJsonDocument
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json
Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "POST"
          Path = "/3/list/{id}/remove_item"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Movie : ApiaryProvider.Runtime.InternalApiaryContext
    member AsyncList: query:string * string list -> headers:string * string list -> ApiaryProvider+CertificationMovieList async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/certification/movie/list"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member List: query:string * string list -> headers:string * string list -> ApiaryProvider+CertificationMovieList
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/certification/movie/list"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Movie3 : FDR.IJsonDocument
    member AccountStates: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieAccountStates
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}/account_states"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "adult")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member AlternativeTitles: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieAlternativeTitles
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}/alternative_titles"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member AsyncAccountStates: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieAccountStates async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/movie/{id}/account_states"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncAlternativeTitles: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieAlternativeTitles async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/movie/{id}/alternative_titles"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncChanges: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieChanges2 async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/movie/{id}/changes"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncCredits: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieCredits async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/movie/{id}/credits"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncImages: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieImages async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/movie/{id}/images"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncKeywords: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieKeywords async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/movie/{id}/keywords"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncLists: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieLists async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/movie/{id}/lists"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncRating: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieRating async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json
Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/3/movie/{id}/rating"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncReleases: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieReleases async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/movie/{id}/releases"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncReviews: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieReviews async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/movie/{id}/reviews"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncSimilarMovies: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieSimilarMovies async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/movie/{id}/similar_movies"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncTranslations: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieTranslations async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/movie/{id}/translations"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncVideos: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieVideos async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/movie/{id}/videos"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member BackdropPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "backdrop_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member BelongsToCollection: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "belongs_to_collection")

    member Budget: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "budget")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Changes: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieChanges2
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}/changes"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Credits: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieCredits
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}/credits"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Genres: ApiaryProvider+Genre[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "genres"), new Func<_,_>(id)))

    member Homepage: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "homepage")

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Images: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieImages
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}/images"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member ImdbId: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "imdb_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Keywords: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieKeywords
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}/keywords"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Lists: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieLists
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}/lists"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "original_title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Overview: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "overview")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Popularity: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "popularity")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "poster_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ProductionCompanies: ApiaryProvider+ProductionCompany[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "production_companies"), new Func<_,_>(id)))

    member ProductionCountries: ApiaryProvider+ProductionCountry[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "production_countries"), new Func<_,_>(id)))

    member Rating: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieRating
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json
Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "POST"
          Path = "/3/movie/{id}/rating"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member ReleaseDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "release_date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member Releases: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieReleases
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}/releases"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Revenue: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "revenue")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Reviews: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieReviews
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}/reviews"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Runtime: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "runtime")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member SimilarMovies: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieSimilarMovies
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}/similar_movies"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member SpokenLanguages: ApiaryProvider+SpokenLanguage[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "spoken_languages"), new Func<_,_>(id)))

    member Status: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Tagline: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "tagline")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Translations: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieTranslations
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}/translations"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Videos: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieVideos
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}/videos"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_average")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+MovieChanges : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Results: ApiaryProvider+Result[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_results")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+MovieLatest : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "adult")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member BackdropPath: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "backdrop_path")

    member BelongsToCollection: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "belongs_to_collection")

    member Budget: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "budget")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Genres: FDR.IJsonDocument[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "genres"), new Func<_,_>(id)))

    member Homepage: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "homepage")

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member ImdbId: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "imdb_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "original_title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Overview: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "overview")

    member Popularity: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "popularity")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member PosterPath: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "poster_path")

    member ProductionCompanies: ApiaryProvider+ProductionCompany[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "production_companies"), new Func<_,_>(id)))

    member ProductionCountries: ApiaryProvider+ProductionCountry[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "production_countries"), new Func<_,_>(id)))

    member ReleaseDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "release_date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member Revenue: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "revenue")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Runtime: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "runtime")

    member SpokenLanguages: ApiaryProvider+SpokenLanguage[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "spoken_languages"), new Func<_,_>(id)))

    member Tagline: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "tagline")

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member VoteAverage: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_average")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+MoviePopular : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Results: ApiaryProvider+Result6[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_results")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+MovieTopRated : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Results: ApiaryProvider+Result7[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_results")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+MovieUpcoming : FDR.IJsonDocument
    member Dates: ApiaryProvider+Dates with get
    JsonRuntime.GetPropertyPacked(this, "dates")

    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Results: ApiaryProvider+Result3[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_results")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Person2 : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "adult")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member AlsoKnownAs: FDR.IJsonDocument[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "also_known_as"), new Func<_,_>(id)))

    member AsyncChanges: query:string * string list -> headers:string * string list -> ApiaryProvider+PersonChanges async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/person/{id}/changes"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncCombinedCredits: query:string * string list -> headers:string * string list -> ApiaryProvider+PersonCombinedCredits async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/person/{id}/combined_credits"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncExternalIds: query:string * string list -> headers:string * string list -> ApiaryProvider+PersonExternalIds async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/person/{id}/external_ids"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncImages: query:string * string list -> headers:string * string list -> ApiaryProvider+PersonImages async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/person/{id}/images"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncMovieCredits: query:string * string list -> headers:string * string list -> ApiaryProvider+PersonMovieCredits async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/person/{id}/movie_credits"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncTvCredits: query:string * string list -> headers:string * string list -> ApiaryProvider+PersonTvCredits async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/person/{id}/tv_credits"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Biography: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "biography")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Birthday: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "birthday")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member Changes: query:string * string list -> headers:string * string list -> ApiaryProvider+PersonChanges
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/person/{id}/changes"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member CombinedCredits: query:string * string list -> headers:string * string list -> ApiaryProvider+PersonCombinedCredits
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/person/{id}/combined_credits"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Deathday: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "deathday")

    member ExternalIds: query:string * string list -> headers:string * string list -> ApiaryProvider+PersonExternalIds
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/person/{id}/external_ids"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Homepage: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "homepage")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Images: query:string * string list -> headers:string * string list -> ApiaryProvider+PersonImages
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/person/{id}/images"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member MovieCredits: query:string * string list -> headers:string * string list -> ApiaryProvider+PersonMovieCredits
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/person/{id}/movie_credits"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member PlaceOfBirth: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "place_of_birth")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ProfilePath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member TvCredits: query:string * string list -> headers:string * string list -> ApiaryProvider+PersonTvCredits
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/person/{id}/tv_credits"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+PersonLatest : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "adult")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member AlsoKnownAs: FDR.IJsonDocument[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "also_known_as"), new Func<_,_>(id)))

    member Biography: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "biography")

    member Birthday: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "birthday")

    member Deathday: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "deathday")

    member Homepage: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "homepage")

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member PlaceOfBirth: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "place_of_birth")

    member ProfilePath: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "profile_path")


class ApiaryProvider+PersonPopular : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Results: ApiaryProvider+Result8[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_results")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+ReviewId : FDR.IJsonDocument
    member Author: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "author")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Content: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "content")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Iso6391: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "iso_639_1")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member MediaId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "media_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member MediaTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "media_title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member MediaType: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "media_type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Url: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+SearchCollection : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Results: ApiaryProvider+Result15[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_results")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+SearchCompany : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Results: ApiaryProvider+Result19[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_results")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+SearchKeyword : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Results: ApiaryProvider+Genre[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_results")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+SearchList : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Results: ApiaryProvider+Result18[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_results")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+SearchMovie : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Results: ApiaryProvider+Result14[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_results")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+SearchPerson : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Results: ApiaryProvider+Result17[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_results")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+SearchTv : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Results: ApiaryProvider+Result16[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_results")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Session : ApiaryProvider.Runtime.InternalApiaryContext
    member AsyncNew: query:string * string list -> headers:string * string list -> ApiaryProvider+AuthenticationSessionNew async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/authentication/session/new"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member New: query:string * string list -> headers:string * string list -> ApiaryProvider+AuthenticationSessionNew
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/authentication/session/new"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+TimezonesList : FDR.IJsonDocument
    member Ad: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "AD"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ae: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "AE"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Af: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "AF"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ag: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "AG"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ai: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "AI"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Al: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "AL"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Am: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "AM"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ao: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "AO"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Aq: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "AQ"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ar: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "AR"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member As: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "AS"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member At: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "AT"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Au: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "AU"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Aw: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "AW"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ax: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "AX"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Az: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "AZ"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ba: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "BA"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Bb: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "BB"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Bd: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "BD"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Be: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "BE"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Bf: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "BF"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Bg: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "BG"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Bh: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "BH"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Bi: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "BI"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Bj: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "BJ"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Bl: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "BL"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Bm: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "BM"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Bn: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "BN"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Bo: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "BO"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Bq: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "BQ"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Br: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "BR"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Bs: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "BS"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Bt: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "BT"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Bv: FDR.IJsonDocument[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "BV"), new Func<_,_>(id)))

    member Bw: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "BW"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member By: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "BY"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Bz: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "BZ"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ca: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "CA"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Cc: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "CC"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Cd: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "CD"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Cf: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "CF"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Cg: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "CG"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ch: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "CH"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ci: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "CI"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ck: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "CK"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Cl: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "CL"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Cm: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "CM"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Cn: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "CN"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Co: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "CO"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Cr: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "CR"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Cu: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "CU"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Cv: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "CV"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Cw: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "CW"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Cx: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "CX"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Cy: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "CY"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Cz: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "CZ"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member De: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "DE"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Dj: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "DJ"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Dk: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "DK"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Dm: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "DM"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Do: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "DO"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Dz: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "DZ"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ec: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "EC"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ee: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "EE"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Eg: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "EG"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Eh: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "EH"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Er: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "ER"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Es: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "ES"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Et: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "ET"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Fi: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "FI"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Fj: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "FJ"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Fk: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "FK"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Fm: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "FM"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Fo: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "FO"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Fr: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "FR"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ga: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "GA"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Gb: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "GB"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Gd: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "GD"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ge: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "GE"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Gf: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "GF"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Gg: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "GG"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Gh: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "GH"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Gi: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "GI"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Gl: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "GL"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Gm: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "GM"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Gn: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "GN"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Gp: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "GP"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Gq: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "GQ"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Gr: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "GR"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Gs: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "GS"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Gt: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "GT"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Gu: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "GU"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Gw: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "GW"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Gy: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "GY"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Hk: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "HK"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Hm: FDR.IJsonDocument[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "HM"), new Func<_,_>(id)))

    member Hn: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "HN"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Hr: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "HR"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ht: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "HT"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Hu: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "HU"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Id: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "ID"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ie: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "IE"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Il: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "IL"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Im: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "IM"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member In: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "IN"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Io: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "IO"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Iq: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "IQ"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ir: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "IR"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Is: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "IS"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member It: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "IT"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Je: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "JE"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Jm: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "JM"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Jo: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "JO"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Jp: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "JP"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ke: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "KE"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Kg: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "KG"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Kh: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "KH"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ki: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "KI"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Km: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "KM"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Kn: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "KN"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Kp: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "KP"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Kr: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "KR"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Kw: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "KW"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ky: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "KY"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Kz: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "KZ"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member La: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "LA"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Lb: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "LB"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Lc: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "LC"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Li: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "LI"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Lk: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "LK"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Lr: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "LR"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ls: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "LS"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Lt: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "LT"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Lu: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "LU"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Lv: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "LV"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ly: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "LY"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ma: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "MA"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Mc: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "MC"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Md: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "MD"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Me: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "ME"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Mf: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "MF"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Mg: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "MG"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Mh: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "MH"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Mk: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "MK"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ml: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "ML"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Mm: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "MM"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Mn: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "MN"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Mo: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "MO"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Mp: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "MP"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Mq: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "MQ"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Mr: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "MR"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ms: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "MS"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Mt: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "MT"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Mu: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "MU"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Mv: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "MV"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Mw: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "MW"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Mx: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "MX"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member My: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "MY"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Mz: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "MZ"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Na: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "NA"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Nc: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "NC"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ne: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "NE"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Nf: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "NF"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ng: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "NG"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ni: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "NI"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Nl: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "NL"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member No: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "NO"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Np: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "NP"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Nr: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "NR"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Nu: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "NU"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Nz: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "NZ"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Om: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "OM"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Pa: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "PA"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Pe: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "PE"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Pf: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "PF"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Pg: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "PG"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ph: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "PH"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Pk: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "PK"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Pl: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "PL"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Pm: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "PM"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Pn: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "PN"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Pr: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "PR"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ps: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "PS"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Pt: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "PT"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Pw: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "PW"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Py: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "PY"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Qa: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "QA"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Re: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "RE"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ro: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "RO"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Rs: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "RS"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ru: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "RU"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Rw: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "RW"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Sa: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "SA"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Sb: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "SB"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Sc: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "SC"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Sd: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "SD"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Se: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "SE"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Sg: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "SG"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Sh: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "SH"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Si: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "SI"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Sj: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "SJ"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Sk: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "SK"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Sl: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "SL"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Sm: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "SM"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Sn: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "SN"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member So: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "SO"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Sr: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "SR"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ss: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "SS"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member St: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "ST"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Sv: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "SV"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Sx: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "SX"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Sy: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "SY"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Sz: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "SZ"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Tc: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "TC"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Td: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "TD"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Tf: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "TF"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Tg: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "TG"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Th: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "TH"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Tj: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "TJ"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Tk: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "TK"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Tl: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "TL"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Tm: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "TM"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Tn: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "TN"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member To: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "TO"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Tr: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "TR"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Tt: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "TT"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Tv: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "TV"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Tw: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "TW"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Tz: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "TZ"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ua: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "UA"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ug: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "UG"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Um: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "UM"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Us: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "US"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Uy: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "UY"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Uz: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "UZ"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Va: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "VA"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Vc: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "VC"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ve: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "VE"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Vg: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "VG"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Vi: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "VI"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Vn: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "VN"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Vu: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "VU"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Wf: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "WF"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ws: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "WS"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Ye: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "YE"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Yt: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "YT"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Za: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "ZA"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Zm: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "ZM"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Zw: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "ZW"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))


class ApiaryProvider+Token : ApiaryProvider.Runtime.InternalApiaryContext
    member AsyncNew: query:string * string list -> headers:string * string list -> ApiaryProvider+AuthenticationTokenNew async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/authentication/token/new"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncValidateWithLogin: query:string * string list -> headers:string * string list -> ApiaryProvider+AuthenticationTokenValidateWithLogin async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/authentication/token/validate_with_login"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member New: query:string * string list -> headers:string * string list -> ApiaryProvider+AuthenticationTokenNew
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/authentication/token/new"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member ValidateWithLogin: query:string * string list -> headers:string * string list -> ApiaryProvider+AuthenticationTokenValidateWithLogin
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/authentication/token/validate_with_login"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Tv2 : FDR.IJsonDocument
    member AsyncCredits: query:string * string list -> headers:string * string list -> ApiaryProvider+TvCredits async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/tv/{id}/credits"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncExternalIds: query:string * string list -> headers:string * string list -> ApiaryProvider+TvExternalIds async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/tv/{id}/external_ids"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncImages: query:string * string list -> headers:string * string list -> ApiaryProvider+TvImages async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/tv/{id}/images"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncTranslations: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieTranslations async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/tv/{id}/translations"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncVideos: query:string * string list -> headers:string * string list -> ApiaryProvider+TvVideos async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/tv/{id}/videos"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member BackdropPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "backdrop_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member CreatedBy: ApiaryProvider+CreatedBy[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "created_by"), new Func<_,_>(id)))

    member Credits: query:string * string list -> headers:string * string list -> ApiaryProvider+TvCredits
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/tv/{id}/credits"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member EpisodeRunTime: int[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "episode_run_time"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member ExternalIds: query:string * string list -> headers:string * string list -> ApiaryProvider+TvExternalIds
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/tv/{id}/external_ids"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member FirstAirDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "first_air_date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member Genres: ApiaryProvider+Genre[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "genres"), new Func<_,_>(id)))

    member Homepage: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "homepage")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Images: query:string * string list -> headers:string * string list -> ApiaryProvider+TvImages
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/tv/{id}/images"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member InProduction: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "in_production")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member Languages: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "languages"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member LastAirDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "last_air_date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Networks: ApiaryProvider+Genre[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "networks"), new Func<_,_>(id)))

    member NumberOfEpisodes: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "number_of_episodes")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member NumberOfSeasons: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "number_of_seasons")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member OriginCountry: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "origin_country"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member OriginalName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "original_name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Overview: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "overview")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Popularity: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "popularity")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "poster_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Season: ApiaryProvider+Season2 with get
    LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context

    member Seasons: ApiaryProvider+Season[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "seasons"), new Func<_,_>(id)))

    member Status: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Translations: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieTranslations
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/tv/{id}/translations"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Videos: query:string * string list -> headers:string * string list -> ApiaryProvider+TvVideos
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/tv/{id}/videos"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_average")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+TvOnTheAir : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Results: ApiaryProvider+Result16[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_results")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+TvTopRated : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Results: ApiaryProvider+Result20[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_results")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+AuthenticationGuestSessionNew : FDR.IJsonDocument
    member ExpiresAt: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "expires_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member GuestSessionId: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "guest_session_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Success: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "success")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+AuthenticationSessionNew : FDR.IJsonDocument
    member SessionId: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "session_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Success: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "success")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+AuthenticationTokenNew : FDR.IJsonDocument
    member ExpiresAt: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "expires_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member RequestToken: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "request_token")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Success: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "success")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+AuthenticationTokenValidateWithLogin : FDR.IJsonDocument
    member RequestToken: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "request_token")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Success: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "success")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+CertificationMovieList : FDR.IJsonDocument
    member Certifications: ApiaryProvider+Certifications with get
    JsonRuntime.GetPropertyPacked(this, "certifications")


class ApiaryProvider+CollectionImages : FDR.IJsonDocument
    member Backdrops: ApiaryProvider+Backdrop2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "backdrops"), new Func<_,_>(id)))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Posters: ApiaryProvider+Poster2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "posters"), new Func<_,_>(id)))


class ApiaryProvider+CompanyMovies : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Results: ApiaryProvider+Result9[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_results")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+CreatedBy : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ProfilePath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Dates : FDR.IJsonDocument
    member Maximum: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "maximum")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member Minimum: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "minimum")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+GenreIdMovies : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Results: ApiaryProvider+Result12[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_results")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+GuestSessionGuestSessionIdRatedMovies : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Results: ApiaryProvider+Result13[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_results")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Item3 : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "adult")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member BackdropPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "backdrop_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "original_title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Popularity: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "popularity")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "poster_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ReleaseDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "release_date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_average")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Job2 : FDR.IJsonDocument
    member Department: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "department")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member JobList: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "job_list"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))


class ApiaryProvider+ListItemStatus : FDR.IJsonDocument
    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ItemPresent: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "item_present")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Media : FDR.IJsonDocument
    member Character: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "character")

    member Episodes: ApiaryProvider+Episode[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "episodes"), new Func<_,_>(id)))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member OriginalName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "original_name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Seasons: FDR.IJsonDocument[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "seasons"), new Func<_,_>(id)))


class ApiaryProvider+MovieAccountStates : FDR.IJsonDocument
    member Favorite: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "favorite")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Rated: ApiaryProvider+Rated with get
    JsonRuntime.GetPropertyPacked(this, "rated")

    member Watchlist: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "watchlist")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+MovieAlternativeTitles : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Titles: ApiaryProvider+Title[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "titles"), new Func<_,_>(id)))


class ApiaryProvider+MovieChanges2 : FDR.IJsonDocument
    member Changes: ApiaryProvider+Change[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "changes"), new Func<_,_>(id)))


class ApiaryProvider+MovieCredits : FDR.IJsonDocument
    member Cast: ApiaryProvider+Cast[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "cast"), new Func<_,_>(id)))

    member Crew: ApiaryProvider+Crew[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "crew"), new Func<_,_>(id)))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+MovieImages : FDR.IJsonDocument
    member Backdrops: ApiaryProvider+Backdrop[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "backdrops"), new Func<_,_>(id)))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Posters: ApiaryProvider+Poster[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "posters"), new Func<_,_>(id)))


class ApiaryProvider+MovieKeywords : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Keywords: ApiaryProvider+Genre[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "keywords"), new Func<_,_>(id)))


class ApiaryProvider+MovieLists : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Results: ApiaryProvider+Result5[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_results")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+MovieRating : FDR.IJsonDocument
    member StatusCode: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status_code")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member StatusMessage: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status_message")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+MovieReleases : FDR.IJsonDocument
    member Countries: ApiaryProvider+Country[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "countries"), new Func<_,_>(id)))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+MovieResult : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "adult")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member BackdropPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "backdrop_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "original_title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Popularity: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "popularity")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "poster_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ReleaseDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "release_date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member VoteAverage: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_average")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+MovieReviews : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Results: ApiaryProvider+Result4[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_results")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+MovieSimilarMovies : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Results: ApiaryProvider+Result3[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total_results")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+MovieTranslations : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Translations: ApiaryProvider+Translation[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "translations"), new Func<_,_>(id)))


class ApiaryProvider+MovieVideos : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Results: ApiaryProvider+Result2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "results"), new Func<_,_>(id)))


class ApiaryProvider+Part : FDR.IJsonDocument
    member BackdropPath: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "backdrop_path"))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member PosterPath: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "poster_path"))

    member ReleaseDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "release_date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+PersonChanges : FDR.IJsonDocument
    member Changes: ApiaryProvider+Change2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "changes"), new Func<_,_>(id)))


class ApiaryProvider+PersonCombinedCredits : FDR.IJsonDocument
    member Cast: ApiaryProvider+Cast4[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "cast"), new Func<_,_>(id)))

    member Crew: ApiaryProvider+Crew3[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "crew"), new Func<_,_>(id)))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+PersonExternalIds : FDR.IJsonDocument
    member FreebaseId: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "freebase_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member FreebaseMid: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "freebase_mid")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member ImdbId: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "imdb_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member TvrageId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "tvrage_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+PersonImages : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Profiles: ApiaryProvider+Profile[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "profiles"), new Func<_,_>(id)))


class ApiaryProvider+PersonMovieCredits : FDR.IJsonDocument
    member Cast: ApiaryProvider+Cast2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "cast"), new Func<_,_>(id)))

    member Crew: ApiaryProvider+Crew2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "crew"), new Func<_,_>(id)))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+PersonTvCredits : FDR.IJsonDocument
    member Cast: ApiaryProvider+Cast3[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "cast"), new Func<_,_>(id)))

    member Crew: FDR.IJsonDocument[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "crew"), new Func<_,_>(id)))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+ProductionCompany : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+ProductionCountry : FDR.IJsonDocument
    member Iso31661: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "iso_3166_1")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Result : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "adult")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Result10 : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "adult")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member BackdropPath: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "backdrop_path"))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "original_title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Popularity: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "popularity")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "poster_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ReleaseDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "release_date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member VoteAverage: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_average")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Result11 : FDR.IJsonDocument
    member BackdropPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "backdrop_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member FirstAirDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "first_air_date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Name: ApiaryProvider+IntOrString with get
    JsonRuntime.GetPropertyPackedOrNull(this, "name")

    member OriginalName: ApiaryProvider+IntOrString with get
    JsonRuntime.GetPropertyPackedOrNull(this, "original_name")

    member Popularity: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "popularity")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "poster_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_average")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Result14 : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "adult")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member BackdropPath: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "backdrop_path"))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "original_title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Popularity: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "popularity")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member PosterPath: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "poster_path"))

    member ReleaseDate: System.DateTime option with get
    JsonRuntime.ConvertDateTime("", JsonRuntime.TryGetPropertyUnpacked(this, "release_date"))

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_average")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Result15 : FDR.IJsonDocument
    member BackdropPath: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "backdrop_path"))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member PosterPath: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "poster_path"))


class ApiaryProvider+Result16 : FDR.IJsonDocument
    member BackdropPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "backdrop_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member FirstAirDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "first_air_date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member OriginalName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "original_name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Popularity: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "popularity")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "poster_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_average")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Result17 : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "adult")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ProfilePath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Result18 : FDR.IJsonDocument
    member Description: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "description")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member FavoriteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "favorite_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Iso6391: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "iso_639_1")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ItemCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "item_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member ListType: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "list_type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "poster_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Result19 : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member LogoPath: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "logo_path"))

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Result20 : FDR.IJsonDocument
    member BackdropPath: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "backdrop_path"))

    member FirstAirDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "first_air_date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member OriginalName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "original_name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Popularity: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "popularity")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "poster_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_average")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Result3 : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "adult")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member BackdropPath: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "backdrop_path"))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "original_title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Popularity: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "popularity")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member PosterPath: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "poster_path"))

    member ReleaseDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "release_date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_average")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Result6 : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "adult")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member BackdropPath: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "backdrop_path"))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "original_title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Popularity: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "popularity")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "poster_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ReleaseDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "release_date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_average")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Result7 : FDR.IJsonDocument
    member BackdropPath: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "backdrop_path"))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "original_title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "poster_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ReleaseDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "release_date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_average")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Result8 : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "adult")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ProfilePath: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "profile_path"))


class ApiaryProvider+Season : FDR.IJsonDocument
    member AirDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "air_date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "poster_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SeasonNumber: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "season_number")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Season2 : ApiaryProvider.Runtime.InternalApiaryContext
    member AsyncGetSeason: id:string -> seasonNumber:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+TvSeasonSeason async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/tv/{id}/season/{season_number}"
                               Arguments = [| ("{id}",
                                               id)
                                              ("{season_number}",
                                               seasonNumber) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member GetSeason: id:string -> seasonNumber:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+TvSeasonSeason
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/tv/{id}/season/{season_number}"
          Arguments = [| ("{id}",
                          id)
                         ("{season_number}",
                          seasonNumber) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+SpokenLanguage : FDR.IJsonDocument
    member Iso6391: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "iso_639_1")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+TvCredits : FDR.IJsonDocument
    member Cast: ApiaryProvider+Cast5[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "cast"), new Func<_,_>(id)))

    member Crew: ApiaryProvider+Crew4[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "crew"), new Func<_,_>(id)))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+TvExternalIds : FDR.IJsonDocument
    member FreebaseId: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "freebase_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member FreebaseMid: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "freebase_mid")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member ImdbId: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "imdb_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member TvdbId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "tvdb_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TvrageId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "tvrage_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+TvImages : FDR.IJsonDocument
    member Backdrops: ApiaryProvider+Backdrop3[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "backdrops"), new Func<_,_>(id)))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Posters: ApiaryProvider+Poster3[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "posters"), new Func<_,_>(id)))


class ApiaryProvider+TvVideos : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Results: ApiaryProvider+Result2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "results"), new Func<_,_>(id)))


class ApiaryProvider+Backdrop : FDR.IJsonDocument
    member AspectRatio: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "aspect_ratio")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member FilePath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "file_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Height: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "height")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Iso6391: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "iso_639_1")

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_average")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Width: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "width")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Backdrop2 : FDR.IJsonDocument
    member AspectRatio: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "aspect_ratio")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member FilePath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "file_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Height: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "height")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Iso6391: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "iso_639_1")

    member Width: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "width")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Backdrop3 : FDR.IJsonDocument
    member AspectRatio: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "aspect_ratio")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member FilePath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "file_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Height: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "height")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Iso6391: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "iso_639_1")

    member VoteAverage: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_average")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Width: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "width")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Cast : FDR.IJsonDocument
    member CastId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "cast_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Character: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "character")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member CreditId: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "credit_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Order: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "order")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member ProfilePath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Cast2 : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "adult")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member Character: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "character"))

    member CreditId: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "credit_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member OriginalTitle: ApiaryProvider+IntOrString with get
    JsonRuntime.GetPropertyPackedOrNull(this, "original_title")

    member PosterPath: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "poster_path"))

    member ReleaseDate: System.DateTime option with get
    JsonRuntime.ConvertDateTime("", JsonRuntime.TryGetPropertyUnpacked(this, "release_date"))

    member Title: ApiaryProvider+IntOrString with get
    JsonRuntime.GetPropertyPackedOrNull(this, "title")


class ApiaryProvider+Cast3 : FDR.IJsonDocument
    member Character: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "character"))

    member CreditId: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "credit_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member EpisodeCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "episode_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member FirstAirDate: System.DateTime option with get
    JsonRuntime.ConvertDateTime("", JsonRuntime.TryGetPropertyUnpacked(this, "first_air_date"))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member OriginalName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "original_name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member PosterPath: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "poster_path"))


class ApiaryProvider+Cast4 : FDR.IJsonDocument
    member Adult: bool option with get
    JsonRuntime.ConvertBoolean("", JsonRuntime.TryGetPropertyUnpacked(this, "adult"))

    member Character: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "character"))

    member CreditId: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "credit_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member EpisodeCount: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "episode_count"))

    member FirstAirDate: System.DateTime option with get
    JsonRuntime.ConvertDateTime("", JsonRuntime.TryGetPropertyUnpacked(this, "first_air_date"))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member MediaType: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "media_type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Name: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "name"))

    member OriginalName: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "original_name"))

    member OriginalTitle: ApiaryProvider+IntOrString with get
    JsonRuntime.GetPropertyPackedOrNull(this, "original_title")

    member PosterPath: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "poster_path"))

    member ReleaseDate: System.DateTime option with get
    JsonRuntime.ConvertDateTime("", JsonRuntime.TryGetPropertyUnpacked(this, "release_date"))

    member Title: ApiaryProvider+IntOrString with get
    JsonRuntime.GetPropertyPackedOrNull(this, "title")


class ApiaryProvider+Cast5 : FDR.IJsonDocument
    member Character: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "character")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member CreditId: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "credit_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Order: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "order")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member ProfilePath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Certifications : FDR.IJsonDocument
    member Au: ApiaryProvider+Au[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "AU"), new Func<_,_>(id)))

    member Ca: ApiaryProvider+Au[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "CA"), new Func<_,_>(id)))

    member De: ApiaryProvider+De[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "DE"), new Func<_,_>(id)))

    member Fr: ApiaryProvider+Fr[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "FR"), new Func<_,_>(id)))

    member Gb: ApiaryProvider+Fr[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "GB"), new Func<_,_>(id)))

    member In: ApiaryProvider+Au[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "IN"), new Func<_,_>(id)))

    member Nz: ApiaryProvider+Fr[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "NZ"), new Func<_,_>(id)))

    member Us: ApiaryProvider+Au[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "US"), new Func<_,_>(id)))


class ApiaryProvider+Change : FDR.IJsonDocument
    member Items: ApiaryProvider+Item[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "items"), new Func<_,_>(id)))

    member Key: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "key")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Change2 : FDR.IJsonDocument
    member Items: ApiaryProvider+Item2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "items"), new Func<_,_>(id)))

    member Key: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "key")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Country : FDR.IJsonDocument
    member Certification: ApiaryProvider+IntOrString with get
    JsonRuntime.GetPropertyPackedOrNull(this, "certification")

    member Iso31661: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "iso_3166_1")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ReleaseDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "release_date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Crew : FDR.IJsonDocument
    member CreditId: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "credit_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Department: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "department")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Job: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "job")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ProfilePath: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "profile_path"))


class ApiaryProvider+Crew2 : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "adult")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member CreditId: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "credit_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Department: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "department")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Job: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "job")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "original_title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member PosterPath: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "poster_path"))

    member ReleaseDate: System.DateTime option with get
    JsonRuntime.ConvertDateTime("", JsonRuntime.TryGetPropertyUnpacked(this, "release_date"))

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Crew3 : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "adult")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member CreditId: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "credit_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Department: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "department")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Job: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "job")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member MediaType: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "media_type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "original_title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member PosterPath: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "poster_path"))

    member ReleaseDate: System.DateTime option with get
    JsonRuntime.ConvertDateTime("", JsonRuntime.TryGetPropertyUnpacked(this, "release_date"))

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Crew4 : FDR.IJsonDocument
    member Department: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "department")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Job: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "job")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ProfilePath: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "profile_path"))


class ApiaryProvider+Episode : FDR.IJsonDocument
    member AirDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "air_date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member EpisodeNumber: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "episode_number")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Overview: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "overview")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SeasonNumber: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "season_number")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member StillPath: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "still_path")


class ApiaryProvider+IntOrString : FDR.IJsonDocument
    member Number: int option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Number", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member String: string option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "String", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))


class ApiaryProvider+Poster : FDR.IJsonDocument
    member AspectRatio: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "aspect_ratio")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member FilePath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "file_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Height: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "height")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Iso6391: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "iso_639_1")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_average")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Width: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "width")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Poster2 : FDR.IJsonDocument
    member AspectRatio: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "aspect_ratio")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member FilePath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "file_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Height: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "height")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Iso6391: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "iso_639_1"))

    member Width: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "width")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Poster3 : FDR.IJsonDocument
    member AspectRatio: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "aspect_ratio")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member FilePath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "file_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Height: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "height")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Iso6391: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "iso_639_1")

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_average")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Width: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "width")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Profile : FDR.IJsonDocument
    member AspectRatio: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "aspect_ratio")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member FilePath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "file_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Height: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "height")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Iso6391: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "iso_639_1")

    member Width: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "width")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Rated : FDR.IJsonDocument
    member Value: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "value")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Result12 : FDR.IJsonDocument
    member BackdropPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "backdrop_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "original_title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "poster_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ReleaseDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "release_date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_average")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Result13 : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "adult")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member BackdropPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "backdrop_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "original_title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Popularity: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "popularity")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "poster_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Rating: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "rating")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member ReleaseDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "release_date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_average")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Result2 : FDR.IJsonDocument
    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Iso6391: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "iso_639_1")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Key: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "key")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Site: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "site")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Size: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "size")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Type: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Result4 : FDR.IJsonDocument
    member Author: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "author")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Content: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "content")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Url: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Result5 : FDR.IJsonDocument
    member Description: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "description")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member FavoriteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "favorite_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Iso6391: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "iso_639_1")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ItemCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "item_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "poster_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Result9 : FDR.IJsonDocument
    member BackdropPath: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "backdrop_path"))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "original_title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "poster_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ReleaseDate: System.DateTime option with get
    JsonRuntime.ConvertDateTime("", JsonRuntime.TryGetPropertyUnpacked(this, "release_date"))

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_average")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Title : FDR.IJsonDocument
    member Iso31661: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "iso_3166_1")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Translation : FDR.IJsonDocument
    member EnglishName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "english_name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Iso6391: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "iso_639_1")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+TvSeasonSeason : FDR.IJsonDocument
    member AirDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "air_date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member AsyncCredits: query:string * string list -> headers:string * string list -> ApiaryProvider+TvCredits async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/tv/{id}/season/{season_number}/credits"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncExternalIds: query:string * string list -> headers:string * string list -> ApiaryProvider+TvSeasonSeasonExternalIds async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/tv/{id}/season/{season_number}/external_ids"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncImages: query:string * string list -> headers:string * string list -> ApiaryProvider+TvSeasonSeasonImages async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/tv/{id}/season/{season_number}/images"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncVideos: query:string * string list -> headers:string * string list -> ApiaryProvider+TvVideos async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/tv/{id}/season/{season_number}/videos"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Credits: query:string * string list -> headers:string * string list -> ApiaryProvider+TvCredits
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/tv/{id}/season/{season_number}/credits"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Episode: ApiaryProvider+Episode3 with get
    LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context

    member Episodes: ApiaryProvider+Episode2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "episodes"), new Func<_,_>(id)))

    member ExternalIds: query:string * string list -> headers:string * string list -> ApiaryProvider+TvSeasonSeasonExternalIds
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/tv/{id}/season/{season_number}/external_ids"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Images: query:string * string list -> headers:string * string list -> ApiaryProvider+TvSeasonSeasonImages
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/tv/{id}/season/{season_number}/images"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Overview: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "overview")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "poster_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SeasonNumber: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "season_number")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Videos: query:string * string list -> headers:string * string list -> ApiaryProvider+TvVideos
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/tv/{id}/season/{season_number}/videos"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Au : FDR.IJsonDocument
    member Certification: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "certification")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Meaning: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "meaning")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Order: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "order")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+De : FDR.IJsonDocument
    member Certification: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "certification")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Meaning: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "meaning")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Order: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "order")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Episode2 : FDR.IJsonDocument
    member AirDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "air_date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member EpisodeNumber: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "episode_number")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Overview: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "overview")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member StillPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "still_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member VoteAverage: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_average")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Episode3 : ApiaryProvider.Runtime.InternalApiaryContext
    member AsyncGetEpisode: id:string -> seasonNumber:string -> episodeNumber:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+TvSeasonSeasonEpisodeEpisode async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/tv/{id}/season/{season_number}/episode/{episode_number}"
                               Arguments = [| ("{id}",
                                               id)
                                              ("{season_number}",
                                               seasonNumber)
                                              ("{episode_number}",
                                               episodeNumber) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member GetEpisode: id:string -> seasonNumber:string -> episodeNumber:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+TvSeasonSeasonEpisodeEpisode
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/tv/{id}/season/{season_number}/episode/{episode_number}"
          Arguments = [| ("{id}",
                          id)
                         ("{season_number}",
                          seasonNumber)
                         ("{episode_number}",
                          episodeNumber) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Fr : FDR.IJsonDocument
    member Certification: ApiaryProvider+IntOrString with get
    JsonRuntime.GetPropertyPackedOrNull(this, "certification")

    member Meaning: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "meaning")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Order: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "order")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Item : FDR.IJsonDocument
    member Action: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "action")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Iso6391: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "iso_639_1"))

    member OriginalValue: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "original_value"))

    member Time: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "time")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Value: ApiaryProvider+IntOrBooleanOrStringOrValue with get
    JsonRuntime.GetPropertyPackedOrNull(this, "value")


class ApiaryProvider+Item2 : FDR.IJsonDocument
    member Action: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "action")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Time: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "time")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Value: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "value"))


class ApiaryProvider+TvSeasonSeasonExternalIds : FDR.IJsonDocument
    member FreebaseId: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "freebase_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member FreebaseMid: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "freebase_mid")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TvdbId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "tvdb_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TvrageId: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "tvrage_id")


class ApiaryProvider+TvSeasonSeasonImages : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Posters: ApiaryProvider+Poster4[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "posters"), new Func<_,_>(id)))


class ApiaryProvider+IntOrBooleanOrStringOrValue : FDR.IJsonDocument
    member Boolean: bool option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Boolean", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertBoolean("", Some t.JsonValue), Some t.JsonValue)))

    member Number: int option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Number", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member Record: ApiaryProvider+Value option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Record@value", new Func<_,_>(id)))

    member String: string option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "String", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))


class ApiaryProvider+Poster4 : FDR.IJsonDocument
    member AspectRatio: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "aspect_ratio")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member FilePath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "file_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Height: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "height")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Iso6391: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "iso_639_1"))

    member VoteAverage: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_average")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Width: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "width")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+TvSeasonSeasonEpisodeEpisode : FDR.IJsonDocument
    member AirDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "air_date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member AsyncCredits: query:string * string list -> headers:string * string list -> ApiaryProvider+TvSeasonSeasonEpisodeEpisodeCredits async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/tv/{id}/season/{season_number}/episode/{episode_number}/credits"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncExternalIds: query:string * string list -> headers:string * string list -> ApiaryProvider+TvSeasonSeasonEpisodeEpisodeExternalIds async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/tv/{id}/season/{season_number}/episode/{episode_number}/external_ids"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncImages: query:string * string list -> headers:string * string list -> ApiaryProvider+TvSeasonSeasonEpisodeEpisodeImages async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/tv/{id}/season/{season_number}/episode/{episode_number}/images"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncVideos: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieVideos async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/3/tv/{id}/season/{season_number}/episode/{episode_number}/videos"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Credits: query:string * string list -> headers:string * string list -> ApiaryProvider+TvSeasonSeasonEpisodeEpisodeCredits
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/tv/{id}/season/{season_number}/episode/{episode_number}/credits"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member EpisodeNumber: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "episode_number")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member ExternalIds: query:string * string list -> headers:string * string list -> ApiaryProvider+TvSeasonSeasonEpisodeEpisodeExternalIds
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/tv/{id}/season/{season_number}/episode/{episode_number}/external_ids"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Images: query:string * string list -> headers:string * string list -> ApiaryProvider+TvSeasonSeasonEpisodeEpisodeImages
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/tv/{id}/season/{season_number}/episode/{episode_number}/images"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Overview: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "overview")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ProductionCode: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "production_code")

    member SeasonNumber: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "season_number")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member StillPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "still_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Videos: query:string * string list -> headers:string * string list -> ApiaryProvider+MovieVideos
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/tv/{id}/season/{season_number}/episode/{episode_number}/videos"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member VoteAverage: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_average")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "vote_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+TvSeasonSeasonEpisodeEpisodeCredits : FDR.IJsonDocument
    member Cast: ApiaryProvider+Cast5[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "cast"), new Func<_,_>(id)))

    member Crew: ApiaryProvider+Crew5[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "crew"), new Func<_,_>(id)))

    member GuestStars: ApiaryProvider+GuestStar[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "guest_stars"), new Func<_,_>(id)))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+TvSeasonSeasonEpisodeEpisodeExternalIds : FDR.IJsonDocument
    member FreebaseId: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "freebase_id")

    member FreebaseMid: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "freebase_mid")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member ImdbId: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "imdb_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member TvdbId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "tvdb_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TvrageId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "tvrage_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+TvSeasonSeasonEpisodeEpisodeImages : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Stills: ApiaryProvider+Backdrop3[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "stills"), new Func<_,_>(id)))


class ApiaryProvider+Value : FDR.IJsonDocument
    member Certification: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "certification"))

    member Character: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "character"))

    member Department: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "department"))

    member Id: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "id"))

    member Iso31661: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "iso_3166_1"))

    member Job: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "job"))

    member Name: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "name"))

    member Order: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "order"))

    member PersonId: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "person_id"))

    member Primary: bool option with get
    JsonRuntime.ConvertBoolean("", JsonRuntime.TryGetPropertyUnpacked(this, "primary"))

    member ReleaseDate: System.DateTime option with get
    JsonRuntime.ConvertDateTime("", JsonRuntime.TryGetPropertyUnpacked(this, "release_date"))


class ApiaryProvider+Crew5 : FDR.IJsonDocument
    member Department: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "department")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Job: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "job")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ProfilePath: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_path")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+GuestStar : FDR.IJsonDocument
    member Character: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "character")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member CreditId: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "credit_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Order: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "order")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member ProfilePath: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "profile_path"))


